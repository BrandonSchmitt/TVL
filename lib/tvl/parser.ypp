%require "3.7.6"
%language "C++"
%skeleton "lalr1.cc"

%define api.namespace {tvl}
%define api.parser.class {Parser}
%define api.location.type {tvl::ast::Location}
%define api.token.constructor
%define api.token.prefix {TOK_}
%define api.token.raw
%define api.value.automove true
%define api.value.type variant
%define parse.error detailed
%define parse.lac full
%define parse.trace

%defines
%locations

%param {tvl::ParsingDriver& driver}
%lex-param {this}

%token
	EOF 0
	COMMA ","
	LEFT_PARENTHESIS "("
	RIGHT_PARENTHESIS ")"
	LEFT_CURLY_BRACE "{"
	RIGHT_CURLY_BRACE "}"
	LEFT_SQUARE_BRACKET "["
	RIGHT_SQUARE_BRACKET "]"
	SEMICOLON ";"
	PLUS "+"
	MINUS "-"
	TIMES "*"
	SLASH "/"
	PERCENT "%"
	EQUAL "="
	DOTDOT ".."
	CONST "const"
	FN "fn"
	FOR "for"
	IN "in"
	LET "let"
	MUT "mut"
;

%token <std::string> IDENTIFIER "identifier";
%token <uint64_t> INTEGER "integer";
%token <double> FLOATING_POINT "floating-point";
%nterm <std::vector<std::unique_ptr<tvl::ast::Expression>>> argument-list;
%nterm <std::vector<std::unique_ptr<tvl::ast::Expression>>> array-elements;
%nterm <std::unique_ptr<tvl::ast::ConstDeclaration>>        const-declaration;
%nterm <std::unique_ptr<tvl::ast::Declaration>>             declaration;
%nterm <std::unique_ptr<tvl::ast::Expression>>              expression;
%nterm <std::unique_ptr<tvl::ast::Function>>                function;
%nterm <std::unique_ptr<tvl::ast::LetDeclaration>>          let-declaration;
%nterm <std::unique_ptr<tvl::ast::LetMutDeclaration>>       let-mut-declaration;
%nterm <std::unique_ptr<tvl::ast::Module>>                  module;
%nterm <std::unique_ptr<tvl::ast::Parameter>>               parameter;
%nterm <std::vector<std::unique_ptr<tvl::ast::Parameter>>>  parameter-list;
%nterm <std::unique_ptr<tvl::ast::Statement>>               statement;
%nterm <std::vector<std::unique_ptr<tvl::ast::Statement>>>  statement-list;

%left ","
%right "=" //"+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|="
%nonassoc ".."
//%left "||"
//%left "&&"
//%left "==" "!=" "<" ">" "<=" "=>"
//%left "|"
//%left "^"
//%left "&"
//%left "<<" ">>"
%left "+" "-"
%left "*" "/" "%"
//%right "!" "~"
//%left "++" "--"
%left "[" "]" "(" ")"
%left ARRAY_INDEXING FUNCTION_CALL

%code requires
{
	#include <memory>
	#include <string>
	#include <vector>
	#include "tvl/AST.h"
	namespace tvl {
		class ParsingDriver;
	}
}

%code
{
	#include "tvl/ParsingDriver.h"

    using namespace std;
	using namespace tvl::ast;
}


//-- GRAMMAR RULES ---------------------------------------
%%

%start module;

argument-list:
	expression                  	{ $$ = vector<unique_ptr<Expression>>(); $$.push_back($1); } |
	argument-list "," expression	{ $$ = $1; $$.push_back($3); } ;

array-elements:
    expression { $$ = vector<unique_ptr<Expression>>(); $$.push_back($1); } |
    array-elements "," expression { $$ = $1; $$.push_back($3); } ;

const-declaration:
    "const" "identifier" "=" expression { $$ = make_unique<ConstDeclaration>($2, $4, @$); } ;

declaration:
    const-declaration { $$ = $1; } |
    let-declaration { $$ = $1; } |
    let-mut-declaration { $$ = $1; } ;

expression:
	"(" expression ")" { $$ = $2; } |
	expression "+" expression { $$ = make_unique<BinaryOperator>(BinaryOperator::Addition, $1, $3, @$); } |	// arithmetic-expression
	expression "-" expression { $$ = make_unique<BinaryOperator>(BinaryOperator::Subtraction, $1, $3, @$); } |	// arithmetic-expression
	expression "*" expression { $$ = make_unique<BinaryOperator>(BinaryOperator::Multiplication, $1, $3, @$); } |	// arithmetic-expression
    expression "/" expression { $$ = make_unique<BinaryOperator>(BinaryOperator::Division, $1, $3, @$); } |	// arithmetic-expression
    expression "%" expression { $$ = make_unique<BinaryOperator>(BinaryOperator::Remainder, $1, $3, @$); } |	// arithmetic-expression
	"[" array-elements "]" { $$ = make_unique<Array>($2, @$); } |	// array-expression
    expression "[" expression "]" { $$ = make_unique<ArrayIndexing>($1, $3, @$); } %prec ARRAY_INDEXING |	// array-indexing-expression
    expression "=" expression { $$ = make_unique<Assignment>($1, $3, @$); } |	// assignment-expression
	"identifier" "(" argument-list ")" %prec FUNCTION_CALL { $$ = make_unique<FunctionCall>($1, $3, @$); } |  // call-expression
	"identifier" "(" ")" %prec FUNCTION_CALL { $$ = make_unique<FunctionCall>($1, vector<unique_ptr<Expression>>(), @$); } |  // call-expression
    "identifier" { $$ = make_unique<Identifier>($1, @$); } |
    expression ".." expression { $$ = make_unique<Range>($1, $3, @$); } |   // range-expression
    "integer" { $$ = make_unique<Integer>($1, @$); } |
    "floating-point" { /*$$ = make_unique<FloatingPoint>($1, @$);*/ } ;

function:
	"fn" "identifier" "(" parameter-list ")" "{" statement-list "}"	{ $$ = make_unique<Function>($2, $4, $7, @$); };

let-declaration:
	"let" "identifier" "=" expression { $$ = make_unique<LetDeclaration>($2, $4, @$); } ;	/* maybe introduce an extra type-identifier? For future cases which could use templating/generics? */

let-mut-declaration:
	"let" "mut" "identifier" "=" expression { $$ = make_unique<LetMutDeclaration>($3, $5, @$); } ;	/* maybe introduce an extra type-identifier? For future cases which could use templating/generics? */

module:
	EOF             { } |
	function module { driver.addFunction($1); } ;

parameter-list:
	%empty                          { $$ = vector<unique_ptr<Parameter>>(); } |
	parameter                   	{ $$ = vector<unique_ptr<Parameter>>(); $$.push_back($1); } |
	parameter "," parameter-list	{ $$ = $3; $$.push_back($1); } ;

parameter:
    "identifier" "identifier" { $$ = make_unique<Parameter>($1, $2, @$); } ;

statement-list:
	%empty                   { $$ = vector<unique_ptr<Statement>>(); } |
	statement-list ";"       { $$ = $1; } |
	statement-list statement { $$ = $1; $$.push_back($2); } ;

statement:
    declaration ";" { $$ = $1; } |
    expression ";" { $$ = $1; } |
	"for" "identifier" "in" expression "{" statement-list "}" { $$ = make_unique<ForLoop>($2, $4, $6, @$); } ;

%%

namespace tvl {
	void Parser::error (const location_type& l, const string& msg) {
		cerr << l << ": " << msg << endl;
	}
}
